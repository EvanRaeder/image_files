name: Rust CI
permissions:
  contents: write
on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    - name: Build release
      run: cargo build --release
    - name: Upload release assets
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-binary
        path: |
          ./target/release/image_files
          ./target/release/image_files.exe
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-binary
        path: ./ubuntu
    - name: Download release assets
      uses: actions/download-artifact@v2
      with:
        name: windows-latest-binary
        path: ./windows
    - name: Test encode ubuntu
      run: ./ubuntu/image_files -e assets/test.zip
    - name: Test encode windows
      run: ./windows/image_files.exe -e assets/test.zip
    - name: Extract version from commit message
      id: get_version
      run: echo "::set-output name=version::$(git log -1 --pretty=%B | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
    - name: Create Release
      if: steps.get_version.outputs.version != ''
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./ubuntu/image_files
          ./windows/image_files.exe
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body: "Release version ${{ steps.get_version.outputs.version }}"
        prerelease: true